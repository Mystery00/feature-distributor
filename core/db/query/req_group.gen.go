// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/db/model"
)

func newReqGroup(db *gorm.DB, opts ...gen.DOOption) reqGroup {
	_reqGroup := reqGroup{}

	_reqGroup.reqGroupDo.UseDB(db, opts...)
	_reqGroup.reqGroupDo.UseModel(&model.ReqGroup{})

	tableName := _reqGroup.reqGroupDo.TableName()
	_reqGroup.ALL = field.NewAsterisk(tableName)
	_reqGroup.GroupID = field.NewInt64(tableName, "group_id")
	_reqGroup.Title = field.NewString(tableName, "title")
	_reqGroup.Key = field.NewString(tableName, "key")
	_reqGroup.Description = field.NewString(tableName, "description")
	_reqGroup.CreateTime = field.NewTime(tableName, "create_time")
	_reqGroup.UpdateTime = field.NewTime(tableName, "update_time")

	_reqGroup.fillFieldMap()

	return _reqGroup
}

type reqGroup struct {
	reqGroupDo

	ALL         field.Asterisk
	GroupID     field.Int64
	Title       field.String
	Key         field.String
	Description field.String
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (r reqGroup) Table(newTableName string) *reqGroup {
	r.reqGroupDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqGroup) As(alias string) *reqGroup {
	r.reqGroupDo.DO = *(r.reqGroupDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqGroup) updateTableName(table string) *reqGroup {
	r.ALL = field.NewAsterisk(table)
	r.GroupID = field.NewInt64(table, "group_id")
	r.Title = field.NewString(table, "title")
	r.Key = field.NewString(table, "key")
	r.Description = field.NewString(table, "description")
	r.CreateTime = field.NewTime(table, "create_time")
	r.UpdateTime = field.NewTime(table, "update_time")

	r.fillFieldMap()

	return r
}

func (r *reqGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqGroup) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["group_id"] = r.GroupID
	r.fieldMap["title"] = r.Title
	r.fieldMap["key"] = r.Key
	r.fieldMap["description"] = r.Description
	r.fieldMap["create_time"] = r.CreateTime
	r.fieldMap["update_time"] = r.UpdateTime
}

func (r reqGroup) clone(db *gorm.DB) reqGroup {
	r.reqGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqGroup) replaceDB(db *gorm.DB) reqGroup {
	r.reqGroupDo.ReplaceDB(db)
	return r
}

type reqGroupDo struct{ gen.DO }

type IReqGroupDo interface {
	gen.SubQuery
	Debug() IReqGroupDo
	WithContext(ctx context.Context) IReqGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqGroupDo
	WriteDB() IReqGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqGroupDo
	Not(conds ...gen.Condition) IReqGroupDo
	Or(conds ...gen.Condition) IReqGroupDo
	Select(conds ...field.Expr) IReqGroupDo
	Where(conds ...gen.Condition) IReqGroupDo
	Order(conds ...field.Expr) IReqGroupDo
	Distinct(cols ...field.Expr) IReqGroupDo
	Omit(cols ...field.Expr) IReqGroupDo
	Join(table schema.Tabler, on ...field.Expr) IReqGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqGroupDo
	Group(cols ...field.Expr) IReqGroupDo
	Having(conds ...gen.Condition) IReqGroupDo
	Limit(limit int) IReqGroupDo
	Offset(offset int) IReqGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqGroupDo
	Unscoped() IReqGroupDo
	Create(values ...*model.ReqGroup) error
	CreateInBatches(values []*model.ReqGroup, batchSize int) error
	Save(values ...*model.ReqGroup) error
	First() (*model.ReqGroup, error)
	Take() (*model.ReqGroup, error)
	Last() (*model.ReqGroup, error)
	Find() ([]*model.ReqGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqGroup, err error)
	FindInBatches(result *[]*model.ReqGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqGroupDo
	Assign(attrs ...field.AssignExpr) IReqGroupDo
	Joins(fields ...field.RelationField) IReqGroupDo
	Preload(fields ...field.RelationField) IReqGroupDo
	FirstOrInit() (*model.ReqGroup, error)
	FirstOrCreate() (*model.ReqGroup, error)
	FindByPage(offset int, limit int) (result []*model.ReqGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqGroupDo) Debug() IReqGroupDo {
	return r.withDO(r.DO.Debug())
}

func (r reqGroupDo) WithContext(ctx context.Context) IReqGroupDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqGroupDo) ReadDB() IReqGroupDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqGroupDo) WriteDB() IReqGroupDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqGroupDo) Session(config *gorm.Session) IReqGroupDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqGroupDo) Clauses(conds ...clause.Expression) IReqGroupDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqGroupDo) Returning(value interface{}, columns ...string) IReqGroupDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqGroupDo) Not(conds ...gen.Condition) IReqGroupDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqGroupDo) Or(conds ...gen.Condition) IReqGroupDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqGroupDo) Select(conds ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqGroupDo) Where(conds ...gen.Condition) IReqGroupDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqGroupDo) Order(conds ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqGroupDo) Distinct(cols ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqGroupDo) Omit(cols ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqGroupDo) Join(table schema.Tabler, on ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqGroupDo) Group(cols ...field.Expr) IReqGroupDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqGroupDo) Having(conds ...gen.Condition) IReqGroupDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqGroupDo) Limit(limit int) IReqGroupDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqGroupDo) Offset(offset int) IReqGroupDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqGroupDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqGroupDo) Unscoped() IReqGroupDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqGroupDo) Create(values ...*model.ReqGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqGroupDo) CreateInBatches(values []*model.ReqGroup, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqGroupDo) Save(values ...*model.ReqGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqGroupDo) First() (*model.ReqGroup, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroup), nil
	}
}

func (r reqGroupDo) Take() (*model.ReqGroup, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroup), nil
	}
}

func (r reqGroupDo) Last() (*model.ReqGroup, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroup), nil
	}
}

func (r reqGroupDo) Find() ([]*model.ReqGroup, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqGroup), err
}

func (r reqGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqGroup, err error) {
	buf := make([]*model.ReqGroup, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqGroupDo) FindInBatches(result *[]*model.ReqGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqGroupDo) Attrs(attrs ...field.AssignExpr) IReqGroupDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqGroupDo) Assign(attrs ...field.AssignExpr) IReqGroupDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqGroupDo) Joins(fields ...field.RelationField) IReqGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqGroupDo) Preload(fields ...field.RelationField) IReqGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqGroupDo) FirstOrInit() (*model.ReqGroup, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroup), nil
	}
}

func (r reqGroupDo) FirstOrCreate() (*model.ReqGroup, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroup), nil
	}
}

func (r reqGroupDo) FindByPage(offset int, limit int) (result []*model.ReqGroup, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqGroupDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqGroupDo) Delete(models ...*model.ReqGroup) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqGroupDo) withDO(do gen.Dao) *reqGroupDo {
	r.DO = *do.(*gen.DO)
	return r
}
