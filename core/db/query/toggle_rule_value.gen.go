// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/db/model"
)

func newToggleRuleValue(db *gorm.DB, opts ...gen.DOOption) toggleRuleValue {
	_toggleRuleValue := toggleRuleValue{}

	_toggleRuleValue.toggleRuleValueDo.UseDB(db, opts...)
	_toggleRuleValue.toggleRuleValueDo.UseModel(&model.ToggleRuleValue{})

	tableName := _toggleRuleValue.toggleRuleValueDo.TableName()
	_toggleRuleValue.ALL = field.NewAsterisk(tableName)
	_toggleRuleValue.ID = field.NewInt64(tableName, "id")
	_toggleRuleValue.ToggleRuleID = field.NewInt64(tableName, "toggle_rule_id")
	_toggleRuleValue.ValueID = field.NewInt64(tableName, "value_id")
	_toggleRuleValue.Percentage = field.NewInt32(tableName, "percentage")
	_toggleRuleValue.CreateTime = field.NewTime(tableName, "create_time")

	_toggleRuleValue.fillFieldMap()

	return _toggleRuleValue
}

type toggleRuleValue struct {
	toggleRuleValueDo

	ALL          field.Asterisk
	ID           field.Int64
	ToggleRuleID field.Int64
	ValueID      field.Int64
	Percentage   field.Int32
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (t toggleRuleValue) Table(newTableName string) *toggleRuleValue {
	t.toggleRuleValueDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toggleRuleValue) As(alias string) *toggleRuleValue {
	t.toggleRuleValueDo.DO = *(t.toggleRuleValueDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toggleRuleValue) updateTableName(table string) *toggleRuleValue {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ToggleRuleID = field.NewInt64(table, "toggle_rule_id")
	t.ValueID = field.NewInt64(table, "value_id")
	t.Percentage = field.NewInt32(table, "percentage")
	t.CreateTime = field.NewTime(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *toggleRuleValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toggleRuleValue) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["toggle_rule_id"] = t.ToggleRuleID
	t.fieldMap["value_id"] = t.ValueID
	t.fieldMap["percentage"] = t.Percentage
	t.fieldMap["create_time"] = t.CreateTime
}

func (t toggleRuleValue) clone(db *gorm.DB) toggleRuleValue {
	t.toggleRuleValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toggleRuleValue) replaceDB(db *gorm.DB) toggleRuleValue {
	t.toggleRuleValueDo.ReplaceDB(db)
	return t
}

type toggleRuleValueDo struct{ gen.DO }

type IToggleRuleValueDo interface {
	gen.SubQuery
	Debug() IToggleRuleValueDo
	WithContext(ctx context.Context) IToggleRuleValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToggleRuleValueDo
	WriteDB() IToggleRuleValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToggleRuleValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToggleRuleValueDo
	Not(conds ...gen.Condition) IToggleRuleValueDo
	Or(conds ...gen.Condition) IToggleRuleValueDo
	Select(conds ...field.Expr) IToggleRuleValueDo
	Where(conds ...gen.Condition) IToggleRuleValueDo
	Order(conds ...field.Expr) IToggleRuleValueDo
	Distinct(cols ...field.Expr) IToggleRuleValueDo
	Omit(cols ...field.Expr) IToggleRuleValueDo
	Join(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo
	Group(cols ...field.Expr) IToggleRuleValueDo
	Having(conds ...gen.Condition) IToggleRuleValueDo
	Limit(limit int) IToggleRuleValueDo
	Offset(offset int) IToggleRuleValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleRuleValueDo
	Unscoped() IToggleRuleValueDo
	Create(values ...*model.ToggleRuleValue) error
	CreateInBatches(values []*model.ToggleRuleValue, batchSize int) error
	Save(values ...*model.ToggleRuleValue) error
	First() (*model.ToggleRuleValue, error)
	Take() (*model.ToggleRuleValue, error)
	Last() (*model.ToggleRuleValue, error)
	Find() ([]*model.ToggleRuleValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleRuleValue, err error)
	FindInBatches(result *[]*model.ToggleRuleValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ToggleRuleValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToggleRuleValueDo
	Assign(attrs ...field.AssignExpr) IToggleRuleValueDo
	Joins(fields ...field.RelationField) IToggleRuleValueDo
	Preload(fields ...field.RelationField) IToggleRuleValueDo
	FirstOrInit() (*model.ToggleRuleValue, error)
	FirstOrCreate() (*model.ToggleRuleValue, error)
	FindByPage(offset int, limit int) (result []*model.ToggleRuleValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToggleRuleValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toggleRuleValueDo) Debug() IToggleRuleValueDo {
	return t.withDO(t.DO.Debug())
}

func (t toggleRuleValueDo) WithContext(ctx context.Context) IToggleRuleValueDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toggleRuleValueDo) ReadDB() IToggleRuleValueDo {
	return t.Clauses(dbresolver.Read)
}

func (t toggleRuleValueDo) WriteDB() IToggleRuleValueDo {
	return t.Clauses(dbresolver.Write)
}

func (t toggleRuleValueDo) Session(config *gorm.Session) IToggleRuleValueDo {
	return t.withDO(t.DO.Session(config))
}

func (t toggleRuleValueDo) Clauses(conds ...clause.Expression) IToggleRuleValueDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toggleRuleValueDo) Returning(value interface{}, columns ...string) IToggleRuleValueDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toggleRuleValueDo) Not(conds ...gen.Condition) IToggleRuleValueDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toggleRuleValueDo) Or(conds ...gen.Condition) IToggleRuleValueDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toggleRuleValueDo) Select(conds ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toggleRuleValueDo) Where(conds ...gen.Condition) IToggleRuleValueDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toggleRuleValueDo) Order(conds ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toggleRuleValueDo) Distinct(cols ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toggleRuleValueDo) Omit(cols ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toggleRuleValueDo) Join(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toggleRuleValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toggleRuleValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toggleRuleValueDo) Group(cols ...field.Expr) IToggleRuleValueDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toggleRuleValueDo) Having(conds ...gen.Condition) IToggleRuleValueDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toggleRuleValueDo) Limit(limit int) IToggleRuleValueDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toggleRuleValueDo) Offset(offset int) IToggleRuleValueDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toggleRuleValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleRuleValueDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toggleRuleValueDo) Unscoped() IToggleRuleValueDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toggleRuleValueDo) Create(values ...*model.ToggleRuleValue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toggleRuleValueDo) CreateInBatches(values []*model.ToggleRuleValue, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toggleRuleValueDo) Save(values ...*model.ToggleRuleValue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toggleRuleValueDo) First() (*model.ToggleRuleValue, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRuleValue), nil
	}
}

func (t toggleRuleValueDo) Take() (*model.ToggleRuleValue, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRuleValue), nil
	}
}

func (t toggleRuleValueDo) Last() (*model.ToggleRuleValue, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRuleValue), nil
	}
}

func (t toggleRuleValueDo) Find() ([]*model.ToggleRuleValue, error) {
	result, err := t.DO.Find()
	return result.([]*model.ToggleRuleValue), err
}

func (t toggleRuleValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleRuleValue, err error) {
	buf := make([]*model.ToggleRuleValue, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toggleRuleValueDo) FindInBatches(result *[]*model.ToggleRuleValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toggleRuleValueDo) Attrs(attrs ...field.AssignExpr) IToggleRuleValueDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toggleRuleValueDo) Assign(attrs ...field.AssignExpr) IToggleRuleValueDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toggleRuleValueDo) Joins(fields ...field.RelationField) IToggleRuleValueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toggleRuleValueDo) Preload(fields ...field.RelationField) IToggleRuleValueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toggleRuleValueDo) FirstOrInit() (*model.ToggleRuleValue, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRuleValue), nil
	}
}

func (t toggleRuleValueDo) FirstOrCreate() (*model.ToggleRuleValue, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRuleValue), nil
	}
}

func (t toggleRuleValueDo) FindByPage(offset int, limit int) (result []*model.ToggleRuleValue, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toggleRuleValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toggleRuleValueDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toggleRuleValueDo) Delete(models ...*model.ToggleRuleValue) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toggleRuleValueDo) withDO(do gen.Dao) *toggleRuleValueDo {
	t.DO = *do.(*gen.DO)
	return t
}
