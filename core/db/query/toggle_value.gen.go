// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/db/model"
)

func newToggleValue(db *gorm.DB, opts ...gen.DOOption) toggleValue {
	_toggleValue := toggleValue{}

	_toggleValue.toggleValueDo.UseDB(db, opts...)
	_toggleValue.toggleValueDo.UseModel(&model.ToggleValue{})

	tableName := _toggleValue.toggleValueDo.TableName()
	_toggleValue.ALL = field.NewAsterisk(tableName)
	_toggleValue.ID = field.NewInt64(tableName, "id")
	_toggleValue.ToggleID = field.NewInt64(tableName, "toggle_id")
	_toggleValue.Title = field.NewString(tableName, "title")
	_toggleValue.Value = field.NewString(tableName, "value")
	_toggleValue.Description = field.NewString(tableName, "description")
	_toggleValue.CreateTime = field.NewTime(tableName, "create_time")

	_toggleValue.fillFieldMap()

	return _toggleValue
}

type toggleValue struct {
	toggleValueDo

	ALL         field.Asterisk
	ID          field.Int64
	ToggleID    field.Int64
	Title       field.String
	Value       field.String
	Description field.String
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (t toggleValue) Table(newTableName string) *toggleValue {
	t.toggleValueDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toggleValue) As(alias string) *toggleValue {
	t.toggleValueDo.DO = *(t.toggleValueDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toggleValue) updateTableName(table string) *toggleValue {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.ToggleID = field.NewInt64(table, "toggle_id")
	t.Title = field.NewString(table, "title")
	t.Value = field.NewString(table, "value")
	t.Description = field.NewString(table, "description")
	t.CreateTime = field.NewTime(table, "create_time")

	t.fillFieldMap()

	return t
}

func (t *toggleValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toggleValue) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["toggle_id"] = t.ToggleID
	t.fieldMap["title"] = t.Title
	t.fieldMap["value"] = t.Value
	t.fieldMap["description"] = t.Description
	t.fieldMap["create_time"] = t.CreateTime
}

func (t toggleValue) clone(db *gorm.DB) toggleValue {
	t.toggleValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toggleValue) replaceDB(db *gorm.DB) toggleValue {
	t.toggleValueDo.ReplaceDB(db)
	return t
}

type toggleValueDo struct{ gen.DO }

type IToggleValueDo interface {
	gen.SubQuery
	Debug() IToggleValueDo
	WithContext(ctx context.Context) IToggleValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToggleValueDo
	WriteDB() IToggleValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToggleValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToggleValueDo
	Not(conds ...gen.Condition) IToggleValueDo
	Or(conds ...gen.Condition) IToggleValueDo
	Select(conds ...field.Expr) IToggleValueDo
	Where(conds ...gen.Condition) IToggleValueDo
	Order(conds ...field.Expr) IToggleValueDo
	Distinct(cols ...field.Expr) IToggleValueDo
	Omit(cols ...field.Expr) IToggleValueDo
	Join(table schema.Tabler, on ...field.Expr) IToggleValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToggleValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToggleValueDo
	Group(cols ...field.Expr) IToggleValueDo
	Having(conds ...gen.Condition) IToggleValueDo
	Limit(limit int) IToggleValueDo
	Offset(offset int) IToggleValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleValueDo
	Unscoped() IToggleValueDo
	Create(values ...*model.ToggleValue) error
	CreateInBatches(values []*model.ToggleValue, batchSize int) error
	Save(values ...*model.ToggleValue) error
	First() (*model.ToggleValue, error)
	Take() (*model.ToggleValue, error)
	Last() (*model.ToggleValue, error)
	Find() ([]*model.ToggleValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleValue, err error)
	FindInBatches(result *[]*model.ToggleValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ToggleValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToggleValueDo
	Assign(attrs ...field.AssignExpr) IToggleValueDo
	Joins(fields ...field.RelationField) IToggleValueDo
	Preload(fields ...field.RelationField) IToggleValueDo
	FirstOrInit() (*model.ToggleValue, error)
	FirstOrCreate() (*model.ToggleValue, error)
	FindByPage(offset int, limit int) (result []*model.ToggleValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToggleValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toggleValueDo) Debug() IToggleValueDo {
	return t.withDO(t.DO.Debug())
}

func (t toggleValueDo) WithContext(ctx context.Context) IToggleValueDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toggleValueDo) ReadDB() IToggleValueDo {
	return t.Clauses(dbresolver.Read)
}

func (t toggleValueDo) WriteDB() IToggleValueDo {
	return t.Clauses(dbresolver.Write)
}

func (t toggleValueDo) Session(config *gorm.Session) IToggleValueDo {
	return t.withDO(t.DO.Session(config))
}

func (t toggleValueDo) Clauses(conds ...clause.Expression) IToggleValueDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toggleValueDo) Returning(value interface{}, columns ...string) IToggleValueDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toggleValueDo) Not(conds ...gen.Condition) IToggleValueDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toggleValueDo) Or(conds ...gen.Condition) IToggleValueDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toggleValueDo) Select(conds ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toggleValueDo) Where(conds ...gen.Condition) IToggleValueDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toggleValueDo) Order(conds ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toggleValueDo) Distinct(cols ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toggleValueDo) Omit(cols ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toggleValueDo) Join(table schema.Tabler, on ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toggleValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toggleValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toggleValueDo) Group(cols ...field.Expr) IToggleValueDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toggleValueDo) Having(conds ...gen.Condition) IToggleValueDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toggleValueDo) Limit(limit int) IToggleValueDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toggleValueDo) Offset(offset int) IToggleValueDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toggleValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleValueDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toggleValueDo) Unscoped() IToggleValueDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toggleValueDo) Create(values ...*model.ToggleValue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toggleValueDo) CreateInBatches(values []*model.ToggleValue, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toggleValueDo) Save(values ...*model.ToggleValue) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toggleValueDo) First() (*model.ToggleValue, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleValue), nil
	}
}

func (t toggleValueDo) Take() (*model.ToggleValue, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleValue), nil
	}
}

func (t toggleValueDo) Last() (*model.ToggleValue, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleValue), nil
	}
}

func (t toggleValueDo) Find() ([]*model.ToggleValue, error) {
	result, err := t.DO.Find()
	return result.([]*model.ToggleValue), err
}

func (t toggleValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleValue, err error) {
	buf := make([]*model.ToggleValue, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toggleValueDo) FindInBatches(result *[]*model.ToggleValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toggleValueDo) Attrs(attrs ...field.AssignExpr) IToggleValueDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toggleValueDo) Assign(attrs ...field.AssignExpr) IToggleValueDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toggleValueDo) Joins(fields ...field.RelationField) IToggleValueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toggleValueDo) Preload(fields ...field.RelationField) IToggleValueDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toggleValueDo) FirstOrInit() (*model.ToggleValue, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleValue), nil
	}
}

func (t toggleValueDo) FirstOrCreate() (*model.ToggleValue, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleValue), nil
	}
}

func (t toggleValueDo) FindByPage(offset int, limit int) (result []*model.ToggleValue, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toggleValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toggleValueDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toggleValueDo) Delete(models ...*model.ToggleValue) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toggleValueDo) withDO(do gen.Dao) *toggleValueDo {
	t.DO = *do.(*gen.DO)
	return t
}
