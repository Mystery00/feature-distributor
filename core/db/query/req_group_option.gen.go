// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/db/model"
)

func newReqGroupOption(db *gorm.DB, opts ...gen.DOOption) reqGroupOption {
	_reqGroupOption := reqGroupOption{}

	_reqGroupOption.reqGroupOptionDo.UseDB(db, opts...)
	_reqGroupOption.reqGroupOptionDo.UseModel(&model.ReqGroupOption{})

	tableName := _reqGroupOption.reqGroupOptionDo.TableName()
	_reqGroupOption.ALL = field.NewAsterisk(tableName)
	_reqGroupOption.OptionID = field.NewInt64(tableName, "option_id")
	_reqGroupOption.GroupID = field.NewInt64(tableName, "group_id")
	_reqGroupOption.ListNum = field.NewInt64(tableName, "list_num")
	_reqGroupOption.AttributeType = field.NewInt8(tableName, "attribute_type")
	_reqGroupOption.AttributeName = field.NewString(tableName, "attribute_name")
	_reqGroupOption.OperationType = field.NewInt8(tableName, "operation_type")
	_reqGroupOption.AttributeValue = field.NewString(tableName, "attribute_value")
	_reqGroupOption.CreateTime = field.NewTime(tableName, "create_time")

	_reqGroupOption.fillFieldMap()

	return _reqGroupOption
}

type reqGroupOption struct {
	reqGroupOptionDo

	ALL            field.Asterisk
	OptionID       field.Int64
	GroupID        field.Int64
	ListNum        field.Int64
	AttributeType  field.Int8
	AttributeName  field.String
	OperationType  field.Int8
	AttributeValue field.String
	CreateTime     field.Time

	fieldMap map[string]field.Expr
}

func (r reqGroupOption) Table(newTableName string) *reqGroupOption {
	r.reqGroupOptionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reqGroupOption) As(alias string) *reqGroupOption {
	r.reqGroupOptionDo.DO = *(r.reqGroupOptionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reqGroupOption) updateTableName(table string) *reqGroupOption {
	r.ALL = field.NewAsterisk(table)
	r.OptionID = field.NewInt64(table, "option_id")
	r.GroupID = field.NewInt64(table, "group_id")
	r.ListNum = field.NewInt64(table, "list_num")
	r.AttributeType = field.NewInt8(table, "attribute_type")
	r.AttributeName = field.NewString(table, "attribute_name")
	r.OperationType = field.NewInt8(table, "operation_type")
	r.AttributeValue = field.NewString(table, "attribute_value")
	r.CreateTime = field.NewTime(table, "create_time")

	r.fillFieldMap()

	return r
}

func (r *reqGroupOption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reqGroupOption) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["option_id"] = r.OptionID
	r.fieldMap["group_id"] = r.GroupID
	r.fieldMap["list_num"] = r.ListNum
	r.fieldMap["attribute_type"] = r.AttributeType
	r.fieldMap["attribute_name"] = r.AttributeName
	r.fieldMap["operation_type"] = r.OperationType
	r.fieldMap["attribute_value"] = r.AttributeValue
	r.fieldMap["create_time"] = r.CreateTime
}

func (r reqGroupOption) clone(db *gorm.DB) reqGroupOption {
	r.reqGroupOptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reqGroupOption) replaceDB(db *gorm.DB) reqGroupOption {
	r.reqGroupOptionDo.ReplaceDB(db)
	return r
}

type reqGroupOptionDo struct{ gen.DO }

type IReqGroupOptionDo interface {
	gen.SubQuery
	Debug() IReqGroupOptionDo
	WithContext(ctx context.Context) IReqGroupOptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReqGroupOptionDo
	WriteDB() IReqGroupOptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReqGroupOptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReqGroupOptionDo
	Not(conds ...gen.Condition) IReqGroupOptionDo
	Or(conds ...gen.Condition) IReqGroupOptionDo
	Select(conds ...field.Expr) IReqGroupOptionDo
	Where(conds ...gen.Condition) IReqGroupOptionDo
	Order(conds ...field.Expr) IReqGroupOptionDo
	Distinct(cols ...field.Expr) IReqGroupOptionDo
	Omit(cols ...field.Expr) IReqGroupOptionDo
	Join(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo
	Group(cols ...field.Expr) IReqGroupOptionDo
	Having(conds ...gen.Condition) IReqGroupOptionDo
	Limit(limit int) IReqGroupOptionDo
	Offset(offset int) IReqGroupOptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReqGroupOptionDo
	Unscoped() IReqGroupOptionDo
	Create(values ...*model.ReqGroupOption) error
	CreateInBatches(values []*model.ReqGroupOption, batchSize int) error
	Save(values ...*model.ReqGroupOption) error
	First() (*model.ReqGroupOption, error)
	Take() (*model.ReqGroupOption, error)
	Last() (*model.ReqGroupOption, error)
	Find() ([]*model.ReqGroupOption, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqGroupOption, err error)
	FindInBatches(result *[]*model.ReqGroupOption, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReqGroupOption) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReqGroupOptionDo
	Assign(attrs ...field.AssignExpr) IReqGroupOptionDo
	Joins(fields ...field.RelationField) IReqGroupOptionDo
	Preload(fields ...field.RelationField) IReqGroupOptionDo
	FirstOrInit() (*model.ReqGroupOption, error)
	FirstOrCreate() (*model.ReqGroupOption, error)
	FindByPage(offset int, limit int) (result []*model.ReqGroupOption, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReqGroupOptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reqGroupOptionDo) Debug() IReqGroupOptionDo {
	return r.withDO(r.DO.Debug())
}

func (r reqGroupOptionDo) WithContext(ctx context.Context) IReqGroupOptionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reqGroupOptionDo) ReadDB() IReqGroupOptionDo {
	return r.Clauses(dbresolver.Read)
}

func (r reqGroupOptionDo) WriteDB() IReqGroupOptionDo {
	return r.Clauses(dbresolver.Write)
}

func (r reqGroupOptionDo) Session(config *gorm.Session) IReqGroupOptionDo {
	return r.withDO(r.DO.Session(config))
}

func (r reqGroupOptionDo) Clauses(conds ...clause.Expression) IReqGroupOptionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reqGroupOptionDo) Returning(value interface{}, columns ...string) IReqGroupOptionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reqGroupOptionDo) Not(conds ...gen.Condition) IReqGroupOptionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reqGroupOptionDo) Or(conds ...gen.Condition) IReqGroupOptionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reqGroupOptionDo) Select(conds ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reqGroupOptionDo) Where(conds ...gen.Condition) IReqGroupOptionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reqGroupOptionDo) Order(conds ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reqGroupOptionDo) Distinct(cols ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reqGroupOptionDo) Omit(cols ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reqGroupOptionDo) Join(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reqGroupOptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reqGroupOptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reqGroupOptionDo) Group(cols ...field.Expr) IReqGroupOptionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reqGroupOptionDo) Having(conds ...gen.Condition) IReqGroupOptionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reqGroupOptionDo) Limit(limit int) IReqGroupOptionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reqGroupOptionDo) Offset(offset int) IReqGroupOptionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reqGroupOptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReqGroupOptionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reqGroupOptionDo) Unscoped() IReqGroupOptionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reqGroupOptionDo) Create(values ...*model.ReqGroupOption) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reqGroupOptionDo) CreateInBatches(values []*model.ReqGroupOption, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reqGroupOptionDo) Save(values ...*model.ReqGroupOption) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reqGroupOptionDo) First() (*model.ReqGroupOption, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroupOption), nil
	}
}

func (r reqGroupOptionDo) Take() (*model.ReqGroupOption, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroupOption), nil
	}
}

func (r reqGroupOptionDo) Last() (*model.ReqGroupOption, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroupOption), nil
	}
}

func (r reqGroupOptionDo) Find() ([]*model.ReqGroupOption, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReqGroupOption), err
}

func (r reqGroupOptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReqGroupOption, err error) {
	buf := make([]*model.ReqGroupOption, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reqGroupOptionDo) FindInBatches(result *[]*model.ReqGroupOption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reqGroupOptionDo) Attrs(attrs ...field.AssignExpr) IReqGroupOptionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reqGroupOptionDo) Assign(attrs ...field.AssignExpr) IReqGroupOptionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reqGroupOptionDo) Joins(fields ...field.RelationField) IReqGroupOptionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reqGroupOptionDo) Preload(fields ...field.RelationField) IReqGroupOptionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reqGroupOptionDo) FirstOrInit() (*model.ReqGroupOption, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroupOption), nil
	}
}

func (r reqGroupOptionDo) FirstOrCreate() (*model.ReqGroupOption, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReqGroupOption), nil
	}
}

func (r reqGroupOptionDo) FindByPage(offset int, limit int) (result []*model.ReqGroupOption, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reqGroupOptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reqGroupOptionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reqGroupOptionDo) Delete(models ...*model.ReqGroupOption) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reqGroupOptionDo) withDO(do gen.Dao) *reqGroupOptionDo {
	r.DO = *do.(*gen.DO)
	return r
}
