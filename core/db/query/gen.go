// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	Project         *project
	ReqGroup        *reqGroup
	ReqGroupOption  *reqGroupOption
	Toggle          *toggle
	ToggleRule      *toggleRule
	ToggleRuleValue *toggleRuleValue
	ToggleValue     *toggleValue
	User            *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Project = &Q.Project
	ReqGroup = &Q.ReqGroup
	ReqGroupOption = &Q.ReqGroupOption
	Toggle = &Q.Toggle
	ToggleRule = &Q.ToggleRule
	ToggleRuleValue = &Q.ToggleRuleValue
	ToggleValue = &Q.ToggleValue
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		Project:         newProject(db, opts...),
		ReqGroup:        newReqGroup(db, opts...),
		ReqGroupOption:  newReqGroupOption(db, opts...),
		Toggle:          newToggle(db, opts...),
		ToggleRule:      newToggleRule(db, opts...),
		ToggleRuleValue: newToggleRuleValue(db, opts...),
		ToggleValue:     newToggleValue(db, opts...),
		User:            newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Project         project
	ReqGroup        reqGroup
	ReqGroupOption  reqGroupOption
	Toggle          toggle
	ToggleRule      toggleRule
	ToggleRuleValue toggleRuleValue
	ToggleValue     toggleValue
	User            user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Project:         q.Project.clone(db),
		ReqGroup:        q.ReqGroup.clone(db),
		ReqGroupOption:  q.ReqGroupOption.clone(db),
		Toggle:          q.Toggle.clone(db),
		ToggleRule:      q.ToggleRule.clone(db),
		ToggleRuleValue: q.ToggleRuleValue.clone(db),
		ToggleValue:     q.ToggleValue.clone(db),
		User:            q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		Project:         q.Project.replaceDB(db),
		ReqGroup:        q.ReqGroup.replaceDB(db),
		ReqGroupOption:  q.ReqGroupOption.replaceDB(db),
		Toggle:          q.Toggle.replaceDB(db),
		ToggleRule:      q.ToggleRule.replaceDB(db),
		ToggleRuleValue: q.ToggleRuleValue.replaceDB(db),
		ToggleValue:     q.ToggleValue.replaceDB(db),
		User:            q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Project         IProjectDo
	ReqGroup        IReqGroupDo
	ReqGroupOption  IReqGroupOptionDo
	Toggle          IToggleDo
	ToggleRule      IToggleRuleDo
	ToggleRuleValue IToggleRuleValueDo
	ToggleValue     IToggleValueDo
	User            IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Project:         q.Project.WithContext(ctx),
		ReqGroup:        q.ReqGroup.WithContext(ctx),
		ReqGroupOption:  q.ReqGroupOption.WithContext(ctx),
		Toggle:          q.Toggle.WithContext(ctx),
		ToggleRule:      q.ToggleRule.WithContext(ctx),
		ToggleRuleValue: q.ToggleRuleValue.WithContext(ctx),
		ToggleValue:     q.ToggleValue.WithContext(ctx),
		User:            q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
