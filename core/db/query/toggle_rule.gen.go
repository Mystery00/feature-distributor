// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/db/model"
)

func newToggleRule(db *gorm.DB, opts ...gen.DOOption) toggleRule {
	_toggleRule := toggleRule{}

	_toggleRule.toggleRuleDo.UseDB(db, opts...)
	_toggleRule.toggleRuleDo.UseModel(&model.ToggleRule{})

	tableName := _toggleRule.toggleRuleDo.TableName()
	_toggleRule.ALL = field.NewAsterisk(tableName)
	_toggleRule.RuleID = field.NewInt64(tableName, "rule_id")
	_toggleRule.ToggleID = field.NewInt64(tableName, "toggle_id")
	_toggleRule.Title = field.NewString(tableName, "title")
	_toggleRule.ListNum = field.NewInt64(tableName, "list_num")
	_toggleRule.RuleType = field.NewInt8(tableName, "rule_type")
	_toggleRule.RuleName = field.NewString(tableName, "rule_name")
	_toggleRule.OperationType = field.NewInt8(tableName, "operation_type")
	_toggleRule.RuleValue = field.NewString(tableName, "rule_value")
	_toggleRule.ReturnValue = field.NewInt64(tableName, "return_value")
	_toggleRule.ReturnValueType = field.NewInt8(tableName, "return_value_type")
	_toggleRule.CreateTime = field.NewTime(tableName, "create_time")
	_toggleRule.UpdateTime = field.NewTime(tableName, "update_time")

	_toggleRule.fillFieldMap()

	return _toggleRule
}

type toggleRule struct {
	toggleRuleDo

	ALL             field.Asterisk
	RuleID          field.Int64
	ToggleID        field.Int64
	Title           field.String
	ListNum         field.Int64
	RuleType        field.Int8
	RuleName        field.String
	OperationType   field.Int8
	RuleValue       field.String
	ReturnValue     field.Int64
	ReturnValueType field.Int8
	CreateTime      field.Time
	UpdateTime      field.Time

	fieldMap map[string]field.Expr
}

func (t toggleRule) Table(newTableName string) *toggleRule {
	t.toggleRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toggleRule) As(alias string) *toggleRule {
	t.toggleRuleDo.DO = *(t.toggleRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toggleRule) updateTableName(table string) *toggleRule {
	t.ALL = field.NewAsterisk(table)
	t.RuleID = field.NewInt64(table, "rule_id")
	t.ToggleID = field.NewInt64(table, "toggle_id")
	t.Title = field.NewString(table, "title")
	t.ListNum = field.NewInt64(table, "list_num")
	t.RuleType = field.NewInt8(table, "rule_type")
	t.RuleName = field.NewString(table, "rule_name")
	t.OperationType = field.NewInt8(table, "operation_type")
	t.RuleValue = field.NewString(table, "rule_value")
	t.ReturnValue = field.NewInt64(table, "return_value")
	t.ReturnValueType = field.NewInt8(table, "return_value_type")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *toggleRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toggleRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["rule_id"] = t.RuleID
	t.fieldMap["toggle_id"] = t.ToggleID
	t.fieldMap["title"] = t.Title
	t.fieldMap["list_num"] = t.ListNum
	t.fieldMap["rule_type"] = t.RuleType
	t.fieldMap["rule_name"] = t.RuleName
	t.fieldMap["operation_type"] = t.OperationType
	t.fieldMap["rule_value"] = t.RuleValue
	t.fieldMap["return_value"] = t.ReturnValue
	t.fieldMap["return_value_type"] = t.ReturnValueType
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t toggleRule) clone(db *gorm.DB) toggleRule {
	t.toggleRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toggleRule) replaceDB(db *gorm.DB) toggleRule {
	t.toggleRuleDo.ReplaceDB(db)
	return t
}

type toggleRuleDo struct{ gen.DO }

type IToggleRuleDo interface {
	gen.SubQuery
	Debug() IToggleRuleDo
	WithContext(ctx context.Context) IToggleRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToggleRuleDo
	WriteDB() IToggleRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToggleRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToggleRuleDo
	Not(conds ...gen.Condition) IToggleRuleDo
	Or(conds ...gen.Condition) IToggleRuleDo
	Select(conds ...field.Expr) IToggleRuleDo
	Where(conds ...gen.Condition) IToggleRuleDo
	Order(conds ...field.Expr) IToggleRuleDo
	Distinct(cols ...field.Expr) IToggleRuleDo
	Omit(cols ...field.Expr) IToggleRuleDo
	Join(table schema.Tabler, on ...field.Expr) IToggleRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToggleRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToggleRuleDo
	Group(cols ...field.Expr) IToggleRuleDo
	Having(conds ...gen.Condition) IToggleRuleDo
	Limit(limit int) IToggleRuleDo
	Offset(offset int) IToggleRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleRuleDo
	Unscoped() IToggleRuleDo
	Create(values ...*model.ToggleRule) error
	CreateInBatches(values []*model.ToggleRule, batchSize int) error
	Save(values ...*model.ToggleRule) error
	First() (*model.ToggleRule, error)
	Take() (*model.ToggleRule, error)
	Last() (*model.ToggleRule, error)
	Find() ([]*model.ToggleRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleRule, err error)
	FindInBatches(result *[]*model.ToggleRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ToggleRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToggleRuleDo
	Assign(attrs ...field.AssignExpr) IToggleRuleDo
	Joins(fields ...field.RelationField) IToggleRuleDo
	Preload(fields ...field.RelationField) IToggleRuleDo
	FirstOrInit() (*model.ToggleRule, error)
	FirstOrCreate() (*model.ToggleRule, error)
	FindByPage(offset int, limit int) (result []*model.ToggleRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToggleRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toggleRuleDo) Debug() IToggleRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t toggleRuleDo) WithContext(ctx context.Context) IToggleRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toggleRuleDo) ReadDB() IToggleRuleDo {
	return t.Clauses(dbresolver.Read)
}

func (t toggleRuleDo) WriteDB() IToggleRuleDo {
	return t.Clauses(dbresolver.Write)
}

func (t toggleRuleDo) Session(config *gorm.Session) IToggleRuleDo {
	return t.withDO(t.DO.Session(config))
}

func (t toggleRuleDo) Clauses(conds ...clause.Expression) IToggleRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toggleRuleDo) Returning(value interface{}, columns ...string) IToggleRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toggleRuleDo) Not(conds ...gen.Condition) IToggleRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toggleRuleDo) Or(conds ...gen.Condition) IToggleRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toggleRuleDo) Select(conds ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toggleRuleDo) Where(conds ...gen.Condition) IToggleRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toggleRuleDo) Order(conds ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toggleRuleDo) Distinct(cols ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toggleRuleDo) Omit(cols ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toggleRuleDo) Join(table schema.Tabler, on ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toggleRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toggleRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toggleRuleDo) Group(cols ...field.Expr) IToggleRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toggleRuleDo) Having(conds ...gen.Condition) IToggleRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toggleRuleDo) Limit(limit int) IToggleRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toggleRuleDo) Offset(offset int) IToggleRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toggleRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toggleRuleDo) Unscoped() IToggleRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toggleRuleDo) Create(values ...*model.ToggleRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toggleRuleDo) CreateInBatches(values []*model.ToggleRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toggleRuleDo) Save(values ...*model.ToggleRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toggleRuleDo) First() (*model.ToggleRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRule), nil
	}
}

func (t toggleRuleDo) Take() (*model.ToggleRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRule), nil
	}
}

func (t toggleRuleDo) Last() (*model.ToggleRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRule), nil
	}
}

func (t toggleRuleDo) Find() ([]*model.ToggleRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.ToggleRule), err
}

func (t toggleRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ToggleRule, err error) {
	buf := make([]*model.ToggleRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toggleRuleDo) FindInBatches(result *[]*model.ToggleRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toggleRuleDo) Attrs(attrs ...field.AssignExpr) IToggleRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toggleRuleDo) Assign(attrs ...field.AssignExpr) IToggleRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toggleRuleDo) Joins(fields ...field.RelationField) IToggleRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toggleRuleDo) Preload(fields ...field.RelationField) IToggleRuleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toggleRuleDo) FirstOrInit() (*model.ToggleRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRule), nil
	}
}

func (t toggleRuleDo) FirstOrCreate() (*model.ToggleRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ToggleRule), nil
	}
}

func (t toggleRuleDo) FindByPage(offset int, limit int) (result []*model.ToggleRule, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toggleRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toggleRuleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toggleRuleDo) Delete(models ...*model.ToggleRule) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toggleRuleDo) withDO(do gen.Dao) *toggleRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
