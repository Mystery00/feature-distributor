// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feature-distributor/core/model"
)

func newToggle(db *gorm.DB, opts ...gen.DOOption) toggle {
	_toggle := toggle{}

	_toggle.toggleDo.UseDB(db, opts...)
	_toggle.toggleDo.UseModel(&model.Toggle{})

	tableName := _toggle.toggleDo.TableName()
	_toggle.ALL = field.NewAsterisk(tableName)
	_toggle.ID = field.NewInt32(tableName, "id")
	_toggle.ProjectID = field.NewInt32(tableName, "project_id")
	_toggle.Title = field.NewString(tableName, "title")
	_toggle.Key = field.NewString(tableName, "key")
	_toggle.Description = field.NewString(tableName, "description")
	_toggle.ValueType = field.NewInt32(tableName, "value_type")
	_toggle.DefaultValue = field.NewInt32(tableName, "default_value")
	_toggle.ReturnValueWhenDisable = field.NewInt32(tableName, "return_value_when_disable")
	_toggle.CreateTime = field.NewTime(tableName, "create_time")
	_toggle.UpdateTime = field.NewTime(tableName, "update_time")

	_toggle.fillFieldMap()

	return _toggle
}

type toggle struct {
	toggleDo toggleDo

	ALL                    field.Asterisk
	ID                     field.Int32
	ProjectID              field.Int32
	Title                  field.String
	Key                    field.String
	Description            field.String
	ValueType              field.Int32
	DefaultValue           field.Int32
	ReturnValueWhenDisable field.Int32
	CreateTime             field.Time
	UpdateTime             field.Time

	fieldMap map[string]field.Expr
}

func (t toggle) Table(newTableName string) *toggle {
	t.toggleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toggle) As(alias string) *toggle {
	t.toggleDo.DO = *(t.toggleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toggle) updateTableName(table string) *toggle {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.ProjectID = field.NewInt32(table, "project_id")
	t.Title = field.NewString(table, "title")
	t.Key = field.NewString(table, "key")
	t.Description = field.NewString(table, "description")
	t.ValueType = field.NewInt32(table, "value_type")
	t.DefaultValue = field.NewInt32(table, "default_value")
	t.ReturnValueWhenDisable = field.NewInt32(table, "return_value_when_disable")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")

	t.fillFieldMap()

	return t
}

func (t *toggle) WithContext(ctx context.Context) IToggleDo { return t.toggleDo.WithContext(ctx) }

func (t toggle) TableName() string { return t.toggleDo.TableName() }

func (t toggle) Alias() string { return t.toggleDo.Alias() }

func (t toggle) Columns(cols ...field.Expr) gen.Columns { return t.toggleDo.Columns(cols...) }

func (t *toggle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toggle) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["project_id"] = t.ProjectID
	t.fieldMap["title"] = t.Title
	t.fieldMap["key"] = t.Key
	t.fieldMap["description"] = t.Description
	t.fieldMap["value_type"] = t.ValueType
	t.fieldMap["default_value"] = t.DefaultValue
	t.fieldMap["return_value_when_disable"] = t.ReturnValueWhenDisable
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
}

func (t toggle) clone(db *gorm.DB) toggle {
	t.toggleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toggle) replaceDB(db *gorm.DB) toggle {
	t.toggleDo.ReplaceDB(db)
	return t
}

type toggleDo struct{ gen.DO }

type IToggleDo interface {
	gen.SubQuery
	Debug() IToggleDo
	WithContext(ctx context.Context) IToggleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToggleDo
	WriteDB() IToggleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToggleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToggleDo
	Not(conds ...gen.Condition) IToggleDo
	Or(conds ...gen.Condition) IToggleDo
	Select(conds ...field.Expr) IToggleDo
	Where(conds ...gen.Condition) IToggleDo
	Order(conds ...field.Expr) IToggleDo
	Distinct(cols ...field.Expr) IToggleDo
	Omit(cols ...field.Expr) IToggleDo
	Join(table schema.Tabler, on ...field.Expr) IToggleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToggleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToggleDo
	Group(cols ...field.Expr) IToggleDo
	Having(conds ...gen.Condition) IToggleDo
	Limit(limit int) IToggleDo
	Offset(offset int) IToggleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleDo
	Unscoped() IToggleDo
	Create(values ...*model.Toggle) error
	CreateInBatches(values []*model.Toggle, batchSize int) error
	Save(values ...*model.Toggle) error
	First() (*model.Toggle, error)
	Take() (*model.Toggle, error)
	Last() (*model.Toggle, error)
	Find() ([]*model.Toggle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Toggle, err error)
	FindInBatches(result *[]*model.Toggle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Toggle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToggleDo
	Assign(attrs ...field.AssignExpr) IToggleDo
	Joins(fields ...field.RelationField) IToggleDo
	Preload(fields ...field.RelationField) IToggleDo
	FirstOrInit() (*model.Toggle, error)
	FirstOrCreate() (*model.Toggle, error)
	FindByPage(offset int, limit int) (result []*model.Toggle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToggleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toggleDo) Debug() IToggleDo {
	return t.withDO(t.DO.Debug())
}

func (t toggleDo) WithContext(ctx context.Context) IToggleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toggleDo) ReadDB() IToggleDo {
	return t.Clauses(dbresolver.Read)
}

func (t toggleDo) WriteDB() IToggleDo {
	return t.Clauses(dbresolver.Write)
}

func (t toggleDo) Session(config *gorm.Session) IToggleDo {
	return t.withDO(t.DO.Session(config))
}

func (t toggleDo) Clauses(conds ...clause.Expression) IToggleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toggleDo) Returning(value interface{}, columns ...string) IToggleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toggleDo) Not(conds ...gen.Condition) IToggleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toggleDo) Or(conds ...gen.Condition) IToggleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toggleDo) Select(conds ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toggleDo) Where(conds ...gen.Condition) IToggleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toggleDo) Order(conds ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toggleDo) Distinct(cols ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toggleDo) Omit(cols ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toggleDo) Join(table schema.Tabler, on ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toggleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToggleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toggleDo) RightJoin(table schema.Tabler, on ...field.Expr) IToggleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toggleDo) Group(cols ...field.Expr) IToggleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toggleDo) Having(conds ...gen.Condition) IToggleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toggleDo) Limit(limit int) IToggleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toggleDo) Offset(offset int) IToggleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toggleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToggleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toggleDo) Unscoped() IToggleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toggleDo) Create(values ...*model.Toggle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toggleDo) CreateInBatches(values []*model.Toggle, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toggleDo) Save(values ...*model.Toggle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toggleDo) First() (*model.Toggle, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toggle), nil
	}
}

func (t toggleDo) Take() (*model.Toggle, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toggle), nil
	}
}

func (t toggleDo) Last() (*model.Toggle, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toggle), nil
	}
}

func (t toggleDo) Find() ([]*model.Toggle, error) {
	result, err := t.DO.Find()
	return result.([]*model.Toggle), err
}

func (t toggleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Toggle, err error) {
	buf := make([]*model.Toggle, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toggleDo) FindInBatches(result *[]*model.Toggle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toggleDo) Attrs(attrs ...field.AssignExpr) IToggleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toggleDo) Assign(attrs ...field.AssignExpr) IToggleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toggleDo) Joins(fields ...field.RelationField) IToggleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toggleDo) Preload(fields ...field.RelationField) IToggleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toggleDo) FirstOrInit() (*model.Toggle, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toggle), nil
	}
}

func (t toggleDo) FirstOrCreate() (*model.Toggle, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toggle), nil
	}
}

func (t toggleDo) FindByPage(offset int, limit int) (result []*model.Toggle, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toggleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toggleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toggleDo) Delete(models ...*model.Toggle) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toggleDo) withDO(do gen.Dao) *toggleDo {
	t.DO = *do.(*gen.DO)
	return t
}
