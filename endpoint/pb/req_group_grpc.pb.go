// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: common/protobuf/req_group.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReqGroupService_ListReqGroup_FullMethodName         = "/ReqGroupService/ListReqGroup"
	ReqGroupService_GetReqGroup_FullMethodName          = "/ReqGroupService/GetReqGroup"
	ReqGroupService_CreateReqGroup_FullMethodName       = "/ReqGroupService/CreateReqGroup"
	ReqGroupService_UpdateReqGroup_FullMethodName       = "/ReqGroupService/UpdateReqGroup"
	ReqGroupService_UpdateReqGroupOption_FullMethodName = "/ReqGroupService/UpdateReqGroupOption"
	ReqGroupService_DeleteReqGroup_FullMethodName       = "/ReqGroupService/DeleteReqGroup"
)

// ReqGroupServiceClient is the client API for ReqGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReqGroupServiceClient interface {
	ListReqGroup(ctx context.Context, in *ListReqGroupRequest, opts ...grpc.CallOption) (*ListReqGroupResponse, error)
	GetReqGroup(ctx context.Context, in *GetReqGroupRequest, opts ...grpc.CallOption) (*ReqGroup, error)
	CreateReqGroup(ctx context.Context, in *ReqGroup, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error)
	UpdateReqGroup(ctx context.Context, in *UpdateReqGroupRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error)
	UpdateReqGroupOption(ctx context.Context, in *UpdateReqGroupOptionRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error)
	DeleteReqGroup(ctx context.Context, in *GetReqGroupRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error)
}

type reqGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReqGroupServiceClient(cc grpc.ClientConnInterface) ReqGroupServiceClient {
	return &reqGroupServiceClient{cc}
}

func (c *reqGroupServiceClient) ListReqGroup(ctx context.Context, in *ListReqGroupRequest, opts ...grpc.CallOption) (*ListReqGroupResponse, error) {
	out := new(ListReqGroupResponse)
	err := c.cc.Invoke(ctx, ReqGroupService_ListReqGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reqGroupServiceClient) GetReqGroup(ctx context.Context, in *GetReqGroupRequest, opts ...grpc.CallOption) (*ReqGroup, error) {
	out := new(ReqGroup)
	err := c.cc.Invoke(ctx, ReqGroupService_GetReqGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reqGroupServiceClient) CreateReqGroup(ctx context.Context, in *ReqGroup, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error) {
	out := new(ReqGroupOperationResponse)
	err := c.cc.Invoke(ctx, ReqGroupService_CreateReqGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reqGroupServiceClient) UpdateReqGroup(ctx context.Context, in *UpdateReqGroupRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error) {
	out := new(ReqGroupOperationResponse)
	err := c.cc.Invoke(ctx, ReqGroupService_UpdateReqGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reqGroupServiceClient) UpdateReqGroupOption(ctx context.Context, in *UpdateReqGroupOptionRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error) {
	out := new(ReqGroupOperationResponse)
	err := c.cc.Invoke(ctx, ReqGroupService_UpdateReqGroupOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reqGroupServiceClient) DeleteReqGroup(ctx context.Context, in *GetReqGroupRequest, opts ...grpc.CallOption) (*ReqGroupOperationResponse, error) {
	out := new(ReqGroupOperationResponse)
	err := c.cc.Invoke(ctx, ReqGroupService_DeleteReqGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReqGroupServiceServer is the server API for ReqGroupService service.
// All implementations must embed UnimplementedReqGroupServiceServer
// for forward compatibility
type ReqGroupServiceServer interface {
	ListReqGroup(context.Context, *ListReqGroupRequest) (*ListReqGroupResponse, error)
	GetReqGroup(context.Context, *GetReqGroupRequest) (*ReqGroup, error)
	CreateReqGroup(context.Context, *ReqGroup) (*ReqGroupOperationResponse, error)
	UpdateReqGroup(context.Context, *UpdateReqGroupRequest) (*ReqGroupOperationResponse, error)
	UpdateReqGroupOption(context.Context, *UpdateReqGroupOptionRequest) (*ReqGroupOperationResponse, error)
	DeleteReqGroup(context.Context, *GetReqGroupRequest) (*ReqGroupOperationResponse, error)
	mustEmbedUnimplementedReqGroupServiceServer()
}

// UnimplementedReqGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReqGroupServiceServer struct {
}

func (UnimplementedReqGroupServiceServer) ListReqGroup(context.Context, *ListReqGroupRequest) (*ListReqGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReqGroup not implemented")
}
func (UnimplementedReqGroupServiceServer) GetReqGroup(context.Context, *GetReqGroupRequest) (*ReqGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReqGroup not implemented")
}
func (UnimplementedReqGroupServiceServer) CreateReqGroup(context.Context, *ReqGroup) (*ReqGroupOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReqGroup not implemented")
}
func (UnimplementedReqGroupServiceServer) UpdateReqGroup(context.Context, *UpdateReqGroupRequest) (*ReqGroupOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReqGroup not implemented")
}
func (UnimplementedReqGroupServiceServer) UpdateReqGroupOption(context.Context, *UpdateReqGroupOptionRequest) (*ReqGroupOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReqGroupOption not implemented")
}
func (UnimplementedReqGroupServiceServer) DeleteReqGroup(context.Context, *GetReqGroupRequest) (*ReqGroupOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReqGroup not implemented")
}
func (UnimplementedReqGroupServiceServer) mustEmbedUnimplementedReqGroupServiceServer() {}

// UnsafeReqGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReqGroupServiceServer will
// result in compilation errors.
type UnsafeReqGroupServiceServer interface {
	mustEmbedUnimplementedReqGroupServiceServer()
}

func RegisterReqGroupServiceServer(s grpc.ServiceRegistrar, srv ReqGroupServiceServer) {
	s.RegisterService(&ReqGroupService_ServiceDesc, srv)
}

func _ReqGroupService_ListReqGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReqGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).ListReqGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_ListReqGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).ListReqGroup(ctx, req.(*ListReqGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReqGroupService_GetReqGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).GetReqGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_GetReqGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).GetReqGroup(ctx, req.(*GetReqGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReqGroupService_CreateReqGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).CreateReqGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_CreateReqGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).CreateReqGroup(ctx, req.(*ReqGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReqGroupService_UpdateReqGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReqGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).UpdateReqGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_UpdateReqGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).UpdateReqGroup(ctx, req.(*UpdateReqGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReqGroupService_UpdateReqGroupOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReqGroupOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).UpdateReqGroupOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_UpdateReqGroupOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).UpdateReqGroupOption(ctx, req.(*UpdateReqGroupOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReqGroupService_DeleteReqGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReqGroupServiceServer).DeleteReqGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReqGroupService_DeleteReqGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReqGroupServiceServer).DeleteReqGroup(ctx, req.(*GetReqGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReqGroupService_ServiceDesc is the grpc.ServiceDesc for ReqGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReqGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReqGroupService",
	HandlerType: (*ReqGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListReqGroup",
			Handler:    _ReqGroupService_ListReqGroup_Handler,
		},
		{
			MethodName: "GetReqGroup",
			Handler:    _ReqGroupService_GetReqGroup_Handler,
		},
		{
			MethodName: "CreateReqGroup",
			Handler:    _ReqGroupService_CreateReqGroup_Handler,
		},
		{
			MethodName: "UpdateReqGroup",
			Handler:    _ReqGroupService_UpdateReqGroup_Handler,
		},
		{
			MethodName: "UpdateReqGroupOption",
			Handler:    _ReqGroupService_UpdateReqGroupOption_Handler,
		},
		{
			MethodName: "DeleteReqGroup",
			Handler:    _ReqGroupService_DeleteReqGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/protobuf/req_group.proto",
}
